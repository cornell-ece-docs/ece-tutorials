{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Cornell ECE This website serves as a launchpad for Cornell's ECE courses, teaching the technical skills you need to know to use the ecelinux servers. In addition, the tutorials on this site cover common software development tools such as git and VS Code . Tutorials Please take a look at the beginner tutorials as instructed by your course staff. ECELinux Access Guides C/C++ Style Guide","title":"Home"},{"location":"#welcome-to-cornell-ece","text":"This website serves as a launchpad for Cornell's ECE courses, teaching the technical skills you need to know to use the ecelinux servers. In addition, the tutorials on this site cover common software development tools such as git and VS Code .","title":"Welcome to Cornell ECE"},{"location":"#tutorials","text":"Please take a look at the beginner tutorials as instructed by your course staff. ECELinux Access","title":"Tutorials"},{"location":"#guides","text":"C/C++ Style Guide","title":"Guides"},{"location":"doc0-coding-style/","text":"ECE C/C++ Coding Conventions Any significant programming project will usually require developers to follow a standardized set of coding conventions. These conventions might be set by a company, the leaders of an open-source project, or simply through historical precedent. Standardized coding conventions enable code written by multiple developers to be consistent and improves readability, maintainability, and extensibility. We have developed a simple set of coding conventions for your ECE coursework that we would like you to use in all programming assignments. Keep in mind that these are just guidelines, and there may be situations where it is appropriate to defy a convention. Note that some of these conventions have been adapted from the Google C++ Style Guide . In general, anything not covered by the guidelines in this document should assume the Google style guide. 1. Directories and Files This section discusses how the file tree should be organized for your project. 1.1. Directories All header, inline, data, and source files should be in a single src directory. All tests should be a in a single tests directory. Anything other than ad-hoc testing should always be done in a separate build directory. 1.2. File Names Files should be named in all lowercase and should use a dash ( - ) to separate words. C source files should use the .c filename extension, and C++ source files should use the .cc filename extension. Header files should use the .h filename extension, and inline files should use the .inl filename extension. Data files that contain C/C++ code and are meant to be included using the C preprocessor should use the .dat filename extension. All test programs should end in -test.c . All evaluation programs should end in -eval.c . 1.3. Header and Inline Files All header files should be self-contained. A header should include all other headers it needs. The definitions for template and inline functions should be placed in a separate .inl file and included at the end of the header. Every header should use include guards where the name of the include guard preprocessor macro is derived directly from the filename. For example, a header file named foo-bar.h would use the following include guards: :::c #ifndef FOO_BAR_H #define FOO_BAR_H #endif // FOO_BAR_H 2. Formatting This section discusses general formatting that is common across all kinds of files. 2.1. Line Length Lines in all files should in general be less than 80 characters. Using less than 74 characters is ideal since this is a natural width that enables reasonable font sizes to be used when using side-by-side code development with two listings on modern laptops and side-by-side code development with three to four listings on 24\" to 27\" monitors. Lines longer than 80 characters should be avoided unless there is a compelling reason to use longer lines to increase code quality. 2.2. Indentation Absolutely no tabs are allowed. Only spaces are allowed for the purposes of indentation. The standard number of spaces per level of indentation is two. Here is an example: ::::c int gcd( int x, int y ) { while ( y != 0 ) { if ( x < y ) { int temp = x; y = temp; x = y; } else { x = x - y; } } return x; } 2.3. Vertical Whitespace Vertical whitspace can and should be used to separate conceptually distinct portions of your code. A blank line within a block of code serves like a paragraph break in prose: visually separating two thoughts. Vertical whitespace should be limited to a single blank line. Do not use two or more blank lines in a row. Do not include a blank line at the beginning and end of the function body in a function definition. So this is incorrect: :::c int foo() { stmt1; return 0; } This is correct: :::c int foo() { stmt1; return 0; } 2.4. Horizontal Whitespace Absolutely no tabs are allowed. Only spaces are allowed for the purposes of indentation. The standard number of spaces per level of indentation is two. In general, horizontal whitespace should be used to separate distinct conceptual \"tokens\". Do not cram all of the characters in an expression together without any horizontal whitespace. There should be white space around binary operators. Here is an example: :::c int a = b*c; // incorrect int a = b * c; // correct Try to use explicit parenthesis to make operator precendence explicit: :::c int a = a < 0 && b != 0; // incorrect int a = ( ( a < 0 ) && ( b != 0 ) ); // correct int a = (a < 0) && (b != 0); // correct Sometimes there can just be too many paranthesis and just too much horizontal white space. So the third one might actually be more readable. Students will have to use their judgement. In some cases, we should not include whitespace around an operator because the operator is not delimiting two distinct conceptual \"tokens\". Here are some examples: :::c int a = obj . field; // incorrect int a = obj.field; // correct int a = obj -> field; // incorrect int a = obj->field; // correct obj . method( b ); // incorrect obj.method( b ); // correct obj -> method( b ); // incorrect obj->method( b ); // correct 2.5. Variable Declarations There should be whitespace around the assignment operator. Here is an example: :::c int a=3; // incorrect int a = 3; // correct If possible, consder vertically aligning the variable names and assignment operators for related variables: :::c unsigned int a = 32; int* a_ptr = &a; Never declare multiple variables in a single statement. Always use multiple statements. Here is an example: :::c int a, b; // incorrect int a; // correct int b; // correct 2.6. Conditional Statements if conditional statements should look like this: :::c if ( conditional_expression0 ) { statement0; } else if ( conditional_expression1 ) { statement1; } else { statement2; } Notice the use of spaces inside the parentheses since the () tokens should be conceptually separated from the conditional expression. We personally really like this style, but can also be okay to skip this horizontal whitespace like ths: :::c if (conditional_expression0) { statement0; } else if (conditional_expression1) { statement1; } else { statement2; } However, it is critical to be consistent! If you use curly braces for one part of an if/then/else statement you must use them for all parts of the statement. Avoid single line if statements: :::c if ( conditional_expression0 ) return 1; // incorrect if ( conditional_expression0 ) // correct return 0; // correct 2.7. Iteration Statements for loops should look like this: :::c for ( int i = 0; i < size; i++ ) { loop_body; } Notice the extra horizontal whitespace used to separate the parentheses from the initialization statement and the increment statement. We personally really like this style, but can also be okay to skip this horizontal whitespace like this: :::c for (int i = 0; i < size; i++) { loop_body; } However, it is critical to be consistent! We really want the open curly brace should be on the same line as the for statement. 2.8. Function Definitions Function definitions should look like this: :::c int foo_bar( int a, int b ) { function_body; } We encourage inserting space inside the parenthesis. We personally really like this style, but can also be okay to skip this horizontal whitespace like this: :::c int foo_bar(int a, int b) { function_body; } However, it is critical to be consistent! Notice that for functions the open curly brace goes on its own line. Do not insert a space between the function name and the open parenthesis. So this is incorrect: :::c // incorrect int foo_bar ( int a, int b ) { function_body; } 2.9. Function Calls Function calls should usually use whitespace inside the parenthesis. For example: :::c int result = gcd( 10, 15 ); If there is a single argument, sometimes it may be more appropriate to eliminate the whitespace inside the parenthesis. Or if it is more readable it might be fine to do this if the arguments are very simple. :::c int result = gcd(10,15); Again, the focus is on readability. 3. Naming 3.1. Type Names For C programs, the names of user-defined types should usually be all lowercase, use underscores ( _ ) to separate words, and use a _t suffix. ::c typedef unsigned int uint_t; For C++ programs, the names of user-defined types should usually use CamelCase. ::c++ class FooBar { ... }; When specifying pointer types, the * should be placed with the type without whitespace: :::c int * a_ptr; // incorrect int *a_ptr; // incorrect int* a_ptr; // correct As a reminder, never declare multiple variables in a single statement. This is never allowed: ::: int *a_ptr, *b_ptr; // not allowed! 3.2. Variable Names The names of variables should always be all lowercase with underscores ( _ ) to separate words. Do not use CamelCase for variable names. For pointers, use a _ptr or _p suffix. For data member fields, use a m_ prefix. While single letter variable names are common in the lecture examples, single letter variable names should be very rare in real code. 3.3. Function/Method Names The names of free functions and methods should always be all lowercase with underscores ( _ ) to separate words. Do not use CamelCase for function or method names. 4. Comments Though a pain to write, comments are absolutely vital to keeping our code readable. The following rules describe what you should comment and where. But remember: while comments are very important, the best code is self-documenting. Giving sensible names to types and variables is much better than using obscure names that you must then explain through comments. When writing your comments, write for your audience: the next contributor who will need to understand your code. Be generous \u2014 the next one may be you! Do not state the obvious. In particular, don't literally describe what code does, unless the behavior is nonobvious to a reader who understands C/C++ well. Instead, provide higher level comments that describe why the code does what it does, or make the code self describing. 4.1. Comment Style Use // comments. These are perfectly acceptable now in C99. Do not use the older /* */ comments. Include a space after // before starting your comment: :::c //without space, incorrect formatting // with space, correct formatting 4.2. Comment Location Avoid trailing comments. They make lines too long and are hard to read. Prefer placing each comment on its own line whenever possible. So avoid this: :::c if ( a > b ) { // if a is greater, subtract b c = a - b; } else { // if b is greater, subtract a c = b - a; } Prefer this instead: :::c // if a is greater, subtract b if ( a > b ) { c = a - b; } // if b is greater, subtract a else { c = b - a; } 4.3. File Comments All files should include a \"title block\". This is a comment at the very beginning of the file which gives the name of the file and a brief description of the purpose and contents of the file. Title blocks should use the following format: :::c //========================================================================= // foo-bar.h //========================================================================= // Description of the purpose and contents of this file. The horizontal lines used in the title block should extend exactly 74 characters (i.e., two '/' characters and 72 = characters). You do not need to duplicate comments between the .h and .cc . Often the header will have a description of the interface, and the source file will discuss the broad implementation approach. 4.4. Function Comments Almost every function declaration in the header should have comments immediately preceding it that describe what the function does and how to use it. These comments may be omitted only if the function is simple and obvious. These comments should be descriptive (\"Opens the file\") rather than imperative (\"Open the file\"); the comment describes the function, it does not tell the function what to do. In general, these comments do not describe how the function performs its task. Instead, that should be left to comments in the function definition. Every function definition in the source file should have a comment like this: :::C //------------------------------------------------------------------------ // foo_bar() //------------------------------------------------------------------------ // optional high-level discussion of implementation approach 4.5. Old Comments Do not leave old comments in the source file. So you must remove comments that were provided by the instructors. 5. Scoping This section discusses use of local and global variables. 5.1. Local Variables Place a function's variables in the narrowest scope possible. C99 no longer requires all variables to be declared at the beginning of a function, so declare variables close to where they are initialized. 5.2. Static and Global Variables Do not use non-const static or global variables unless there is a very good reason to do so. Const global variables are allowed and should definitely be used instead of preprocessor defines. 6. C Pre-processor Using the C pre-processor should be avoided. Use of the C pre-processor should usually be limited to include guards and the UTST macros. When the C pre-processor must be used, pre-processor macro names should be in all capital letters and use an underscore ( _ ) to separate words. Do not use the C pre-processor to declare global constants. Use const global variables instead. 7. Examples Here is an example of an incorrectly formatted for loop: :::c for (int i = 0; i < n; i ++){ a += c; } There should be a space inside the parenthesis and no space between i and ++ . There should be a space after the closing parenthesis and the open curly brace. Here is the same code formatted correctly: :::c for ( int i = 0; i < n; i++ ) { a += c; } Here is an example of an incorrectly formatted if statement: :::c if (a < 0 && b != 0){ c = 1 / c; } else (x % 2 == 0){ ... } There should be a space inside the parenthesis and we need extra parenthesis to make the operator precedence more explicit. We also need a space between the closing parenthesis and the open curly brace. :::c if ( ( a < 0 ) && ( b != 0 ) ) { c = 1 / c; } else ( ( x % 2 ) == 0 ) { ... } Once we have multiple levels of nested parenthesis, it might be more readable to do something like this: :::c if ( (a < 0) && (b != 0) ) { c = 1 / c; } else ( (x % 2) == 0 ) { ... } Here is an example of a poorly formatted return statement: :::c void foo() { ... return bar( x ) * bar( y ); } Indentation should be used to make this more clear: :::c void foo() { ... return bar( x ) * bar( y ); } This code does not include spaces around the assignment operator, and isn't even consistent in its formatting: :::c double foo= b; int c =bar; double e=1; This should look like this: :::c double foo = b; int c = bar; double e = 1; Notice how we lined up the variable names and the assignment operators vertically. Here is an example of incorrectly formatted code: :::c int gcd(int x, int y){ while(y!=0) { if ( x < y){ int t=x; x= temp; x =y; } else x = x - y; } return x; } Here is an example of correctly formatted code: :::c //------------------------------------------------------------------------ // gcd() //------------------------------------------------------------------------ int gcd( int x, int y ) { // iterate until GCD is found while ( y != 0 ) { if ( x < y ) { // swap x and y int temp = x; y = temp; x = y; } else { x = x - y; } } return x; }","title":"ECE C/C++ Coding Conventions"},{"location":"doc0-coding-style/#ece-cc-coding-conventions","text":"Any significant programming project will usually require developers to follow a standardized set of coding conventions. These conventions might be set by a company, the leaders of an open-source project, or simply through historical precedent. Standardized coding conventions enable code written by multiple developers to be consistent and improves readability, maintainability, and extensibility. We have developed a simple set of coding conventions for your ECE coursework that we would like you to use in all programming assignments. Keep in mind that these are just guidelines, and there may be situations where it is appropriate to defy a convention. Note that some of these conventions have been adapted from the Google C++ Style Guide . In general, anything not covered by the guidelines in this document should assume the Google style guide.","title":"ECE C/C++ Coding Conventions"},{"location":"doc0-coding-style/#1-directories-and-files","text":"This section discusses how the file tree should be organized for your project.","title":"1. Directories and Files"},{"location":"doc0-coding-style/#11-directories","text":"All header, inline, data, and source files should be in a single src directory. All tests should be a in a single tests directory. Anything other than ad-hoc testing should always be done in a separate build directory.","title":"1.1. Directories"},{"location":"doc0-coding-style/#12-file-names","text":"Files should be named in all lowercase and should use a dash ( - ) to separate words. C source files should use the .c filename extension, and C++ source files should use the .cc filename extension. Header files should use the .h filename extension, and inline files should use the .inl filename extension. Data files that contain C/C++ code and are meant to be included using the C preprocessor should use the .dat filename extension. All test programs should end in -test.c . All evaluation programs should end in -eval.c .","title":"1.2. File Names"},{"location":"doc0-coding-style/#13-header-and-inline-files","text":"All header files should be self-contained. A header should include all other headers it needs. The definitions for template and inline functions should be placed in a separate .inl file and included at the end of the header. Every header should use include guards where the name of the include guard preprocessor macro is derived directly from the filename. For example, a header file named foo-bar.h would use the following include guards: :::c #ifndef FOO_BAR_H #define FOO_BAR_H #endif // FOO_BAR_H","title":"1.3. Header and Inline Files"},{"location":"doc0-coding-style/#2-formatting","text":"This section discusses general formatting that is common across all kinds of files.","title":"2. Formatting"},{"location":"doc0-coding-style/#21-line-length","text":"Lines in all files should in general be less than 80 characters. Using less than 74 characters is ideal since this is a natural width that enables reasonable font sizes to be used when using side-by-side code development with two listings on modern laptops and side-by-side code development with three to four listings on 24\" to 27\" monitors. Lines longer than 80 characters should be avoided unless there is a compelling reason to use longer lines to increase code quality.","title":"2.1. Line Length"},{"location":"doc0-coding-style/#22-indentation","text":"Absolutely no tabs are allowed. Only spaces are allowed for the purposes of indentation. The standard number of spaces per level of indentation is two. Here is an example: ::::c int gcd( int x, int y ) { while ( y != 0 ) { if ( x < y ) { int temp = x; y = temp; x = y; } else { x = x - y; } } return x; }","title":"2.2. Indentation"},{"location":"doc0-coding-style/#23-vertical-whitespace","text":"Vertical whitspace can and should be used to separate conceptually distinct portions of your code. A blank line within a block of code serves like a paragraph break in prose: visually separating two thoughts. Vertical whitespace should be limited to a single blank line. Do not use two or more blank lines in a row. Do not include a blank line at the beginning and end of the function body in a function definition. So this is incorrect: :::c int foo() { stmt1; return 0; } This is correct: :::c int foo() { stmt1; return 0; }","title":"2.3. Vertical Whitespace"},{"location":"doc0-coding-style/#24-horizontal-whitespace","text":"Absolutely no tabs are allowed. Only spaces are allowed for the purposes of indentation. The standard number of spaces per level of indentation is two. In general, horizontal whitespace should be used to separate distinct conceptual \"tokens\". Do not cram all of the characters in an expression together without any horizontal whitespace. There should be white space around binary operators. Here is an example: :::c int a = b*c; // incorrect int a = b * c; // correct Try to use explicit parenthesis to make operator precendence explicit: :::c int a = a < 0 && b != 0; // incorrect int a = ( ( a < 0 ) && ( b != 0 ) ); // correct int a = (a < 0) && (b != 0); // correct Sometimes there can just be too many paranthesis and just too much horizontal white space. So the third one might actually be more readable. Students will have to use their judgement. In some cases, we should not include whitespace around an operator because the operator is not delimiting two distinct conceptual \"tokens\". Here are some examples: :::c int a = obj . field; // incorrect int a = obj.field; // correct int a = obj -> field; // incorrect int a = obj->field; // correct obj . method( b ); // incorrect obj.method( b ); // correct obj -> method( b ); // incorrect obj->method( b ); // correct","title":"2.4. Horizontal Whitespace"},{"location":"doc0-coding-style/#25-variable-declarations","text":"There should be whitespace around the assignment operator. Here is an example: :::c int a=3; // incorrect int a = 3; // correct If possible, consder vertically aligning the variable names and assignment operators for related variables: :::c unsigned int a = 32; int* a_ptr = &a; Never declare multiple variables in a single statement. Always use multiple statements. Here is an example: :::c int a, b; // incorrect int a; // correct int b; // correct","title":"2.5. Variable Declarations"},{"location":"doc0-coding-style/#26-conditional-statements","text":"if conditional statements should look like this: :::c if ( conditional_expression0 ) { statement0; } else if ( conditional_expression1 ) { statement1; } else { statement2; } Notice the use of spaces inside the parentheses since the () tokens should be conceptually separated from the conditional expression. We personally really like this style, but can also be okay to skip this horizontal whitespace like ths: :::c if (conditional_expression0) { statement0; } else if (conditional_expression1) { statement1; } else { statement2; } However, it is critical to be consistent! If you use curly braces for one part of an if/then/else statement you must use them for all parts of the statement. Avoid single line if statements: :::c if ( conditional_expression0 ) return 1; // incorrect if ( conditional_expression0 ) // correct return 0; // correct","title":"2.6. Conditional Statements"},{"location":"doc0-coding-style/#27-iteration-statements","text":"for loops should look like this: :::c for ( int i = 0; i < size; i++ ) { loop_body; } Notice the extra horizontal whitespace used to separate the parentheses from the initialization statement and the increment statement. We personally really like this style, but can also be okay to skip this horizontal whitespace like this: :::c for (int i = 0; i < size; i++) { loop_body; } However, it is critical to be consistent! We really want the open curly brace should be on the same line as the for statement.","title":"2.7. Iteration Statements"},{"location":"doc0-coding-style/#28-function-definitions","text":"Function definitions should look like this: :::c int foo_bar( int a, int b ) { function_body; } We encourage inserting space inside the parenthesis. We personally really like this style, but can also be okay to skip this horizontal whitespace like this: :::c int foo_bar(int a, int b) { function_body; } However, it is critical to be consistent! Notice that for functions the open curly brace goes on its own line. Do not insert a space between the function name and the open parenthesis. So this is incorrect: :::c // incorrect int foo_bar ( int a, int b ) { function_body; }","title":"2.8. Function Definitions"},{"location":"doc0-coding-style/#29-function-calls","text":"Function calls should usually use whitespace inside the parenthesis. For example: :::c int result = gcd( 10, 15 ); If there is a single argument, sometimes it may be more appropriate to eliminate the whitespace inside the parenthesis. Or if it is more readable it might be fine to do this if the arguments are very simple. :::c int result = gcd(10,15); Again, the focus is on readability.","title":"2.9. Function Calls"},{"location":"doc0-coding-style/#3-naming","text":"","title":"3. Naming"},{"location":"doc0-coding-style/#31-type-names","text":"For C programs, the names of user-defined types should usually be all lowercase, use underscores ( _ ) to separate words, and use a _t suffix. ::c typedef unsigned int uint_t; For C++ programs, the names of user-defined types should usually use CamelCase. ::c++ class FooBar { ... }; When specifying pointer types, the * should be placed with the type without whitespace: :::c int * a_ptr; // incorrect int *a_ptr; // incorrect int* a_ptr; // correct As a reminder, never declare multiple variables in a single statement. This is never allowed: ::: int *a_ptr, *b_ptr; // not allowed!","title":"3.1. Type Names"},{"location":"doc0-coding-style/#32-variable-names","text":"The names of variables should always be all lowercase with underscores ( _ ) to separate words. Do not use CamelCase for variable names. For pointers, use a _ptr or _p suffix. For data member fields, use a m_ prefix. While single letter variable names are common in the lecture examples, single letter variable names should be very rare in real code.","title":"3.2. Variable Names"},{"location":"doc0-coding-style/#33-functionmethod-names","text":"The names of free functions and methods should always be all lowercase with underscores ( _ ) to separate words. Do not use CamelCase for function or method names.","title":"3.3. Function/Method Names"},{"location":"doc0-coding-style/#4-comments","text":"Though a pain to write, comments are absolutely vital to keeping our code readable. The following rules describe what you should comment and where. But remember: while comments are very important, the best code is self-documenting. Giving sensible names to types and variables is much better than using obscure names that you must then explain through comments. When writing your comments, write for your audience: the next contributor who will need to understand your code. Be generous \u2014 the next one may be you! Do not state the obvious. In particular, don't literally describe what code does, unless the behavior is nonobvious to a reader who understands C/C++ well. Instead, provide higher level comments that describe why the code does what it does, or make the code self describing.","title":"4. Comments"},{"location":"doc0-coding-style/#41-comment-style","text":"Use // comments. These are perfectly acceptable now in C99. Do not use the older /* */ comments. Include a space after // before starting your comment: :::c //without space, incorrect formatting // with space, correct formatting","title":"4.1. Comment Style"},{"location":"doc0-coding-style/#42-comment-location","text":"Avoid trailing comments. They make lines too long and are hard to read. Prefer placing each comment on its own line whenever possible. So avoid this: :::c if ( a > b ) { // if a is greater, subtract b c = a - b; } else { // if b is greater, subtract a c = b - a; } Prefer this instead: :::c // if a is greater, subtract b if ( a > b ) { c = a - b; } // if b is greater, subtract a else { c = b - a; }","title":"4.2. Comment Location"},{"location":"doc0-coding-style/#43-file-comments","text":"All files should include a \"title block\". This is a comment at the very beginning of the file which gives the name of the file and a brief description of the purpose and contents of the file. Title blocks should use the following format: :::c //========================================================================= // foo-bar.h //========================================================================= // Description of the purpose and contents of this file. The horizontal lines used in the title block should extend exactly 74 characters (i.e., two '/' characters and 72 = characters). You do not need to duplicate comments between the .h and .cc . Often the header will have a description of the interface, and the source file will discuss the broad implementation approach.","title":"4.3. File Comments"},{"location":"doc0-coding-style/#44-function-comments","text":"Almost every function declaration in the header should have comments immediately preceding it that describe what the function does and how to use it. These comments may be omitted only if the function is simple and obvious. These comments should be descriptive (\"Opens the file\") rather than imperative (\"Open the file\"); the comment describes the function, it does not tell the function what to do. In general, these comments do not describe how the function performs its task. Instead, that should be left to comments in the function definition. Every function definition in the source file should have a comment like this: :::C //------------------------------------------------------------------------ // foo_bar() //------------------------------------------------------------------------ // optional high-level discussion of implementation approach","title":"4.4. Function Comments"},{"location":"doc0-coding-style/#45-old-comments","text":"Do not leave old comments in the source file. So you must remove comments that were provided by the instructors.","title":"4.5. Old Comments"},{"location":"doc0-coding-style/#5-scoping","text":"This section discusses use of local and global variables.","title":"5. Scoping"},{"location":"doc0-coding-style/#51-local-variables","text":"Place a function's variables in the narrowest scope possible. C99 no longer requires all variables to be declared at the beginning of a function, so declare variables close to where they are initialized.","title":"5.1. Local Variables"},{"location":"doc0-coding-style/#52-static-and-global-variables","text":"Do not use non-const static or global variables unless there is a very good reason to do so. Const global variables are allowed and should definitely be used instead of preprocessor defines.","title":"5.2. Static and Global Variables"},{"location":"doc0-coding-style/#6-c-pre-processor","text":"Using the C pre-processor should be avoided. Use of the C pre-processor should usually be limited to include guards and the UTST macros. When the C pre-processor must be used, pre-processor macro names should be in all capital letters and use an underscore ( _ ) to separate words. Do not use the C pre-processor to declare global constants. Use const global variables instead.","title":"6. C Pre-processor"},{"location":"doc0-coding-style/#7-examples","text":"Here is an example of an incorrectly formatted for loop: :::c for (int i = 0; i < n; i ++){ a += c; } There should be a space inside the parenthesis and no space between i and ++ . There should be a space after the closing parenthesis and the open curly brace. Here is the same code formatted correctly: :::c for ( int i = 0; i < n; i++ ) { a += c; } Here is an example of an incorrectly formatted if statement: :::c if (a < 0 && b != 0){ c = 1 / c; } else (x % 2 == 0){ ... } There should be a space inside the parenthesis and we need extra parenthesis to make the operator precedence more explicit. We also need a space between the closing parenthesis and the open curly brace. :::c if ( ( a < 0 ) && ( b != 0 ) ) { c = 1 / c; } else ( ( x % 2 ) == 0 ) { ... } Once we have multiple levels of nested parenthesis, it might be more readable to do something like this: :::c if ( (a < 0) && (b != 0) ) { c = 1 / c; } else ( (x % 2) == 0 ) { ... } Here is an example of a poorly formatted return statement: :::c void foo() { ... return bar( x ) * bar( y ); } Indentation should be used to make this more clear: :::c void foo() { ... return bar( x ) * bar( y ); } This code does not include spaces around the assignment operator, and isn't even consistent in its formatting: :::c double foo= b; int c =bar; double e=1; This should look like this: :::c double foo = b; int c = bar; double e = 1; Notice how we lined up the variable names and the assignment operators vertically. Here is an example of incorrectly formatted code: :::c int gcd(int x, int y){ while(y!=0) { if ( x < y){ int t=x; x= temp; x =y; } else x = x - y; } return x; } Here is an example of correctly formatted code: :::c //------------------------------------------------------------------------ // gcd() //------------------------------------------------------------------------ int gcd( int x, int y ) { // iterate until GCD is found while ( y != 0 ) { if ( x < y ) { // swap x and y int temp = x; y = temp; x = y; } else { x = x - y; } } return x; }","title":"7. Examples"},{"location":"tut0-ecelinux/","text":"ECE Linux Server Remote Access Most of your ECE coursework will be completed remotely, by logging into the cluster of ecelinux servers. The ecelinux servers all run the Red Hat Enterprise Linux operating system with identical setups. First, you do not need to do anything to create an ecelinux account. You will be using your NetID and Cornell password to login, and an ecelinux account will be automatically created for you. Any student enrolled in an ECE class should automatically be granted access to the ecelinux servers. With that said, please reach out to the course staff if you cannot log in. Later tutorials will discuss how to use the Linux command line and the git version control system. However, this tutorial focuses on how to initially setup remote access to the ecelinux servers. First, you will connect to the Cornell VPN. Then, you will open a remote shell and log in. Any terminal emulator should do the trick, but we recommend using PowerShell on Windows or Terminal on Mac. After logging in, the tutorial will introduce Visual Studio Code (VS Code), which provides a very nice graphical interface to supplement the command line. 1. Connecting to the Cornell VPN If you are logging into the ecelinux servers from an on-campus network (i.e., using the Cornell wired or wireless network), then you do not need to enable the Cornell virtual private network (VPN). However, if you are off campus, then you will need to connect the Cornell VPN whenever you want to use the ecelinux servers. The VPN provides an extra layer of security, and more information about the Cornell VPN is available here: https://it.cornell.edu/landing-page-kba/2605/5273 Simply follow the instructions at the above link to install the Cisco VPN software for your operating system. Basic troubleshooting steps can be found at the following link. https://it.cornell.edu/landing-page-kba/2605/823 Logging into the VPN requires (1) your NetID, (2) your password, and (3) your Duo Mobile authenticator. Notice in the screenshot below, then second password field labeled 'Duo'. There you will enter 'push' and clicking 'Connect' should trigger a Duo notification. 2. Remote Access via Terminal Emulator Any terminal emulator should be able to connect to ecelinux, but we recommend using PowerShell on Windows or Terminal on Mac. Both enable you to operate your computer from the command line. Moreover, they also enable secure, remote access to other systems. We will use the ssh command (short for secure shell), and then we will practice some simple actions like manipulating files. 2.1. Starting PowerShell or Mac Terminal First, you must be connected to the Cornell VPN if you are off campus. To start PowerShell, click the Start menu then search for Windows PowerShell. To start Mac Terminal, go to your Applications folder and choose Utilities > Terminal. You can also open Spotlight, type Terminal, and press enter. 2.2. Logging into ecelinux Servers with PowerShell or Mac Terminal After starting PowerShell or Mac Terminal, type in the following command at the command prompt: $ ssh <netid>@ecelinux.ece.cornell.edu Replace 'netid' with your Cornell NetID. Make sure not to enter the dollar sign---that is just the bash shell prompt. Executing this command correctly will ask you for your Cornell NetID password. If all is well, then you should be connected to the ecelinux servers. The very first time you log into the ecelinux servers you may see a warning like this: The authenticity of host \u2019ecelinux.ece.cornell.edu (128.253.51.206)\u2019 can\u2019t be established. ECDSA key fingerprint is SHA256:smwMnf9dyhs5zW5I279C5oJBrTFc5FLghIJMfBR1cxI. Are you sure you want to continue connecting (yes/no)? This is expected, and you can enter 'yes.' If you logged in successfully, your shell should look like this: $ ssh netid@ecelinux.ece.cornell.edu netid@ecelinux.ece.cornell.edu's password: ******************************************************************************* THIS SERVER IS FOR INSTRUCTIONAL USE ONLY ABSOLUTELY NO RESEARCH SHOULD BE DONE ON THIS SERVER JOBS RUNNING LONGER THAN 30 MINUTES MAY BE KILLED WITHOUT WARNING System Maintenance Tuesday and Thursday mornings between 5am and 7 am. System may reboot during these times. Faculty may request postponement of this maintenance by sending an email to itcoecis-help@cornell.edu ******************************************************************************* [netid@ecelinux-20 ~]$ 2.3. Nano Text Editor Now that you are online, let's try to use a simple command line program. Nano is a text-based editor installed on all linux machines. To experiment with nano , we will first grab a text file to edit from the internet with the wget command. $ wget https://pastebin.com/raw/xsf10vFR -O myfile.txt Notice that the file is now in on working directory: $ ls myfile.txt We can now open this file and edit it with nano : $ nano myfile.txt Notice that the editor shows most of the useful commands at the bottom of the terminal. The symbol \\^ signifies the CONTROL key. To type any text you want, just move the insertion point around using your arrow keys. Let's add 'Hello ECE!' to the end of the file. To exit and save your changes, press CONTROL+X, Y to save, and then ENTER to use the same file name. Congrats! We can test that our file was updated with cat : $ cat myfile.txt Hello wget! Hello ECE! 3. Remote Access via VS Code While you can complete all your coursework with just a terminal, it is not the most productive setup. We strongly recommend using VS Code as your primary option for code development on ecelinux. VS Code runs the GUI interface on your personal computer, but executes your actions on the remote computer. This enables you to use ecelinux as if it is your own computer. All you need is VS Code plus the remote ssh extension . But first, here is more information on how to install VS Code in the first place. 3.1. Installing VS Code on Your Laptop/Workstation You can download VS Code by simply going to the main VS Code webpage: https://code.visualstudio.com There are no special steps required. However, you may want to consider disabling telemetry for security concerns. Here are some VS Code extensions you will more than likely use for your coursework: remote ssh extension C/C++ clangd for C++ Verilog HDL 3.2. Logging into ecelinux Servers with VS Code As a reminder, you must be connected to the Cornell VPN to access ecelinux off-campus. After starting VS Code, choose View > Command Palette from the menubar. Enter the command Remote-SSH: Connect Current Window to Host in the command palette: As you start typing the command, you can just click the correct option when you see it. VS Code will then ask you where to connect to. You should enter netid@ecelinux.ece.cornell.edu . Of course, replace netid with your Cornell NetID. If you are on Windows, then you may see a pop-up which says 'Windows Defender Firewall has blocked some features of this app.' This is not a problem. Simply click 'Cancel.' You may also see a drop down asking you to choose the operating system of the remote host. Choose Linux. This is the operating system of ecelinux. Now VS Code should prompt you to enter your Cornell NetID password. Logging into ecelinux with VS Code for the first time may take up to a minute or two to initialize. Once the pop up dialog box goes away and you see 'SSH: ecelinux.ece.cornell.edu' in the lower left-hand corner of VS Code, then you know you are connected to the ecelinux servers. The final step is to make sure your personal VS Code extensions are also installed on the remote host. Choose View > Extensions from the menubar. Instead of saying 'Install' it should now say 'Install in SSH: ecelinux.ece.cornell.edu.' Click this choice for the extensions you need. You should only need to do this once. 3.4. Using VS Code VS Code includes an integrated file explorer. Choose View > Explorer from the menubar. Then, click on Open Folder. VS Code will then ask you to Open File Or Folder with a default of /home/netid. Click 'OK.' You might see a pop-up which asks you 'Do you trust the authors of the files in this folder?' Since you will only be browsing your own files on the ecelinux server, it is fine to choose 'Yes, I trust the authors.' This will reload VS Code, and you should now see a file explorer in the left sidebar. You can easily browse your directory hierarchy, open files by clicking on them, create new files, and delete files. VS Code also includes an integrated terminal which will give you access to the Linux command line on the ecelinux servers. Choose Terminal > New Terminal from the menubar. You should see the same kind of Linux command line prompt that you saw when using either PowerShell or Mac Terminal. What is cool is that we can open new VS Code tabs from the command line: $ wget https://pastebin.com/raw/xsf10vFR -O mynewfile.txt $ code mynewfile.txt Notice how the text file opened in a new tab at the top, and the terminal remains at the bottom. This enables you to have easy access to editing files and the Linux command line at the same time. 3.5. Troubleshooting Remote Access via VS Code Sometimes VS Code just keeps asking you for your password forever or VS Code just hangs when you try to connect to the server. You can definitely ask the course staff for help, but you can also try to fix it on your own. The first attempt is to kill the VS Code server on the host machine (ecelinux). Choose View > Command Palette from the menubar. Enter Remote-SSH: Kill VS Code Server on Host in the command palette. The second thing to try is to delete the .vscode-server directory on the sever. How can you delete this directory if you cannot use VS Code to access the ecelinux servers? You can simply use PowerShell or Mac Terminal to log into the ecelinux servers. Once you have gained access to the Linux command line on the ecelinux servers, you can delete the .vscode-server directory like this: $ rm -rf .vscode-server Be very careful with the rm command since it can permanently delete files! Lastly, you can also try to directly log into a specific ecelinux server. Instead of logging into ecelinux.ece.cornell.edu (which automatically picks an ecelinux server for you), you can log into ecelinux-01.ece.cornell.edu , ecelinux-02.ece.cornell.edu , and so on.","title":"ECE Linux Server Remote Access"},{"location":"tut0-ecelinux/#ece-linux-server-remote-access","text":"Most of your ECE coursework will be completed remotely, by logging into the cluster of ecelinux servers. The ecelinux servers all run the Red Hat Enterprise Linux operating system with identical setups. First, you do not need to do anything to create an ecelinux account. You will be using your NetID and Cornell password to login, and an ecelinux account will be automatically created for you. Any student enrolled in an ECE class should automatically be granted access to the ecelinux servers. With that said, please reach out to the course staff if you cannot log in. Later tutorials will discuss how to use the Linux command line and the git version control system. However, this tutorial focuses on how to initially setup remote access to the ecelinux servers. First, you will connect to the Cornell VPN. Then, you will open a remote shell and log in. Any terminal emulator should do the trick, but we recommend using PowerShell on Windows or Terminal on Mac. After logging in, the tutorial will introduce Visual Studio Code (VS Code), which provides a very nice graphical interface to supplement the command line.","title":"ECE Linux Server Remote Access"},{"location":"tut0-ecelinux/#1-connecting-to-the-cornell-vpn","text":"If you are logging into the ecelinux servers from an on-campus network (i.e., using the Cornell wired or wireless network), then you do not need to enable the Cornell virtual private network (VPN). However, if you are off campus, then you will need to connect the Cornell VPN whenever you want to use the ecelinux servers. The VPN provides an extra layer of security, and more information about the Cornell VPN is available here: https://it.cornell.edu/landing-page-kba/2605/5273 Simply follow the instructions at the above link to install the Cisco VPN software for your operating system. Basic troubleshooting steps can be found at the following link. https://it.cornell.edu/landing-page-kba/2605/823 Logging into the VPN requires (1) your NetID, (2) your password, and (3) your Duo Mobile authenticator. Notice in the screenshot below, then second password field labeled 'Duo'. There you will enter 'push' and clicking 'Connect' should trigger a Duo notification.","title":"1. Connecting to the Cornell VPN"},{"location":"tut0-ecelinux/#2-remote-access-via-terminal-emulator","text":"Any terminal emulator should be able to connect to ecelinux, but we recommend using PowerShell on Windows or Terminal on Mac. Both enable you to operate your computer from the command line. Moreover, they also enable secure, remote access to other systems. We will use the ssh command (short for secure shell), and then we will practice some simple actions like manipulating files.","title":"2. Remote Access via Terminal Emulator"},{"location":"tut0-ecelinux/#21-starting-powershell-or-mac-terminal","text":"First, you must be connected to the Cornell VPN if you are off campus. To start PowerShell, click the Start menu then search for Windows PowerShell. To start Mac Terminal, go to your Applications folder and choose Utilities > Terminal. You can also open Spotlight, type Terminal, and press enter.","title":"2.1. Starting PowerShell or Mac Terminal"},{"location":"tut0-ecelinux/#22-logging-into-ecelinux-servers-with-powershell-or-mac-terminal","text":"After starting PowerShell or Mac Terminal, type in the following command at the command prompt: $ ssh <netid>@ecelinux.ece.cornell.edu Replace 'netid' with your Cornell NetID. Make sure not to enter the dollar sign---that is just the bash shell prompt. Executing this command correctly will ask you for your Cornell NetID password. If all is well, then you should be connected to the ecelinux servers. The very first time you log into the ecelinux servers you may see a warning like this: The authenticity of host \u2019ecelinux.ece.cornell.edu (128.253.51.206)\u2019 can\u2019t be established. ECDSA key fingerprint is SHA256:smwMnf9dyhs5zW5I279C5oJBrTFc5FLghIJMfBR1cxI. Are you sure you want to continue connecting (yes/no)? This is expected, and you can enter 'yes.' If you logged in successfully, your shell should look like this: $ ssh netid@ecelinux.ece.cornell.edu netid@ecelinux.ece.cornell.edu's password: ******************************************************************************* THIS SERVER IS FOR INSTRUCTIONAL USE ONLY ABSOLUTELY NO RESEARCH SHOULD BE DONE ON THIS SERVER JOBS RUNNING LONGER THAN 30 MINUTES MAY BE KILLED WITHOUT WARNING System Maintenance Tuesday and Thursday mornings between 5am and 7 am. System may reboot during these times. Faculty may request postponement of this maintenance by sending an email to itcoecis-help@cornell.edu ******************************************************************************* [netid@ecelinux-20 ~]$","title":"2.2. Logging into ecelinux Servers with PowerShell or Mac Terminal"},{"location":"tut0-ecelinux/#23-nano-text-editor","text":"Now that you are online, let's try to use a simple command line program. Nano is a text-based editor installed on all linux machines. To experiment with nano , we will first grab a text file to edit from the internet with the wget command. $ wget https://pastebin.com/raw/xsf10vFR -O myfile.txt Notice that the file is now in on working directory: $ ls myfile.txt We can now open this file and edit it with nano : $ nano myfile.txt Notice that the editor shows most of the useful commands at the bottom of the terminal. The symbol \\^ signifies the CONTROL key. To type any text you want, just move the insertion point around using your arrow keys. Let's add 'Hello ECE!' to the end of the file. To exit and save your changes, press CONTROL+X, Y to save, and then ENTER to use the same file name. Congrats! We can test that our file was updated with cat : $ cat myfile.txt Hello wget! Hello ECE!","title":"2.3. Nano Text Editor"},{"location":"tut0-ecelinux/#3-remote-access-via-vs-code","text":"While you can complete all your coursework with just a terminal, it is not the most productive setup. We strongly recommend using VS Code as your primary option for code development on ecelinux. VS Code runs the GUI interface on your personal computer, but executes your actions on the remote computer. This enables you to use ecelinux as if it is your own computer. All you need is VS Code plus the remote ssh extension . But first, here is more information on how to install VS Code in the first place.","title":"3. Remote Access via VS Code"},{"location":"tut0-ecelinux/#31-installing-vs-code-on-your-laptopworkstation","text":"You can download VS Code by simply going to the main VS Code webpage: https://code.visualstudio.com There are no special steps required. However, you may want to consider disabling telemetry for security concerns. Here are some VS Code extensions you will more than likely use for your coursework: remote ssh extension C/C++ clangd for C++ Verilog HDL","title":"3.1. Installing VS Code on Your Laptop/Workstation"},{"location":"tut0-ecelinux/#32-logging-into-ecelinux-servers-with-vs-code","text":"As a reminder, you must be connected to the Cornell VPN to access ecelinux off-campus. After starting VS Code, choose View > Command Palette from the menubar. Enter the command Remote-SSH: Connect Current Window to Host in the command palette: As you start typing the command, you can just click the correct option when you see it. VS Code will then ask you where to connect to. You should enter netid@ecelinux.ece.cornell.edu . Of course, replace netid with your Cornell NetID. If you are on Windows, then you may see a pop-up which says 'Windows Defender Firewall has blocked some features of this app.' This is not a problem. Simply click 'Cancel.' You may also see a drop down asking you to choose the operating system of the remote host. Choose Linux. This is the operating system of ecelinux. Now VS Code should prompt you to enter your Cornell NetID password. Logging into ecelinux with VS Code for the first time may take up to a minute or two to initialize. Once the pop up dialog box goes away and you see 'SSH: ecelinux.ece.cornell.edu' in the lower left-hand corner of VS Code, then you know you are connected to the ecelinux servers. The final step is to make sure your personal VS Code extensions are also installed on the remote host. Choose View > Extensions from the menubar. Instead of saying 'Install' it should now say 'Install in SSH: ecelinux.ece.cornell.edu.' Click this choice for the extensions you need. You should only need to do this once.","title":"3.2. Logging into ecelinux Servers with VS Code"},{"location":"tut0-ecelinux/#34-using-vs-code","text":"VS Code includes an integrated file explorer. Choose View > Explorer from the menubar. Then, click on Open Folder. VS Code will then ask you to Open File Or Folder with a default of /home/netid. Click 'OK.' You might see a pop-up which asks you 'Do you trust the authors of the files in this folder?' Since you will only be browsing your own files on the ecelinux server, it is fine to choose 'Yes, I trust the authors.' This will reload VS Code, and you should now see a file explorer in the left sidebar. You can easily browse your directory hierarchy, open files by clicking on them, create new files, and delete files. VS Code also includes an integrated terminal which will give you access to the Linux command line on the ecelinux servers. Choose Terminal > New Terminal from the menubar. You should see the same kind of Linux command line prompt that you saw when using either PowerShell or Mac Terminal. What is cool is that we can open new VS Code tabs from the command line: $ wget https://pastebin.com/raw/xsf10vFR -O mynewfile.txt $ code mynewfile.txt Notice how the text file opened in a new tab at the top, and the terminal remains at the bottom. This enables you to have easy access to editing files and the Linux command line at the same time.","title":"3.4. Using VS Code"},{"location":"tut0-ecelinux/#35-troubleshooting-remote-access-via-vs-code","text":"Sometimes VS Code just keeps asking you for your password forever or VS Code just hangs when you try to connect to the server. You can definitely ask the course staff for help, but you can also try to fix it on your own. The first attempt is to kill the VS Code server on the host machine (ecelinux). Choose View > Command Palette from the menubar. Enter Remote-SSH: Kill VS Code Server on Host in the command palette. The second thing to try is to delete the .vscode-server directory on the sever. How can you delete this directory if you cannot use VS Code to access the ecelinux servers? You can simply use PowerShell or Mac Terminal to log into the ecelinux servers. Once you have gained access to the Linux command line on the ecelinux servers, you can delete the .vscode-server directory like this: $ rm -rf .vscode-server Be very careful with the rm command since it can permanently delete files! Lastly, you can also try to directly log into a specific ecelinux server. Instead of logging into ecelinux.ece.cornell.edu (which automatically picks an ecelinux server for you), you can log into ecelinux-01.ece.cornell.edu , ecelinux-02.ece.cornell.edu , and so on.","title":"3.5. Troubleshooting Remote Access via VS Code"}]}